"""
    OpenWeatherMap API

    Get current weather, daily forecast for 16 days, and 3-hourly forecast 5 days for your city. Helpful stats, graphics, and this day in history charts are available for your reference. Interactive maps show precipitation, clouds, pressure, wind around your location stations. Data is available in JSON, XML, or HTML format. **Note**: This sample Swagger file covers the `current` endpoint only from the OpenWeatherMap API. <br/><br/> **Note**: All parameters are optional, but you must select at least one parameter. Calling the API by city ID (using the `id` parameter) will provide the most precise location results.  # noqa: E501

    The version of the OpenAPI document: 2.5.2
    Contact: some_email@gmail.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.model200 import Model200


class CurrentWeatherDataApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __current_weather_data(
            self,
            **kwargs
        ):
            """Call current weather data for one location  # noqa: E501

            Access current weather data for any location on Earth including over 200,000 cities! Current weather is frequently updated based on global models and data from more than 40,000 weather stations.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.current_weather_data(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                q (str): **City name**. *Example: London*. You can call by city name, or by city name and country code. The API responds with a list of results that match a searching word. For the query value, type the city name and optionally the country code divided by comma; use ISO 3166 country codes.. [optional]
                id (str): **City ID**. *Example: `2172797`*. You can call by city ID. API responds with exact result. The List of city IDs can be downloaded [here](http://bulk.openweathermap.org/sample/). You can include multiple cities in parameter &mdash; just separate them by commas. The limit of locations is 20. *Note: A single ID counts as a one API call. So, if you have city IDs. it's treated as 3 API calls.*. [optional]
                lat (str): **Latitude**. *Example: 35*. The latitude cordinate of the location of your interest. Must use with `lon`.. [optional]
                lon (str): **Longitude**. *Example: 139*. Longitude cordinate of the location of your interest. Must use with `lat`.. [optional]
                zip (str): **Zip code**. Search by zip code. *Example: 95050,us*. Please note if country is not specified then the search works for USA as a default.. [optional]
                units (str): **Units**. *Example: imperial*. Possible values: `standard`, `metric`, and `imperial`. When you do not use units parameter, format is `standard` by default.. [optional] if omitted the server will use the default value of "imperial"
                lang (str): **Language**. *Example: en*. You can use lang parameter to get the output in your language. We support the following languages that you can use with the corresponded lang values: Arabic - `ar`, Bulgarian - `bg`, Catalan - `ca`, Czech - `cz`, German - `de`, Greek - `el`, English - `en`, Persian (Farsi) - `fa`, Finnish - `fi`, French - `fr`, Galician - `gl`, Croatian - `hr`, Hungarian - `hu`, Italian - `it`, Japanese - `ja`, Korean - `kr`, Latvian - `la`, Lithuanian - `lt`, Macedonian - `mk`, Dutch - `nl`, Polish - `pl`, Portuguese - `pt`, Romanian - `ro`, Russian - `ru`, Swedish - `se`, Slovak - `sk`, Slovenian - `sl`, Spanish - `es`, Turkish - `tr`, Ukrainian - `ua`, Vietnamese - `vi`, Chinese Simplified - `zh_cn`, Chinese Traditional - `zh_tw`.. [optional] if omitted the server will use the default value of "en"
                mode (str): **Mode**. *Example: html*. Determines format of response. Possible values are `xml` and `html`. If mode parameter is empty the format is `json` by default.. [optional] if omitted the server will use the default value of "json"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Model200
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.current_weather_data = _Endpoint(
            settings={
                'response_type': (Model200,),
                'auth': [
                    'app_id'
                ],
                'endpoint_path': '/weather',
                'operation_id': 'current_weather_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'q',
                    'id',
                    'lat',
                    'lon',
                    'zip',
                    'units',
                    'lang',
                    'mode',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'units',
                    'lang',
                    'mode',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('units',): {

                        "STANDARD": "standard",
                        "METRIC": "metric",
                        "IMPERIAL": "imperial"
                    },
                    ('lang',): {

                        "AR": "ar",
                        "BG": "bg",
                        "CA": "ca",
                        "CZ": "cz",
                        "DE": "de",
                        "EL": "el",
                        "EN": "en",
                        "FA": "fa",
                        "FI": "fi",
                        "FR": "fr",
                        "GL": "gl",
                        "HR": "hr",
                        "HU": "hu",
                        "IT": "it",
                        "JA": "ja",
                        "KR": "kr",
                        "LA": "la",
                        "LT": "lt",
                        "MK": "mk",
                        "NL": "nl",
                        "PL": "pl",
                        "PT": "pt",
                        "RO": "ro",
                        "RU": "ru",
                        "SE": "se",
                        "SK": "sk",
                        "SL": "sl",
                        "ES": "es",
                        "TR": "tr",
                        "UA": "ua",
                        "VI": "vi",
                        "ZH_CN": "zh_cn",
                        "ZH_TW": "zh_tw"
                    },
                    ('mode',): {

                        "JSON": "json",
                        "XML": "xml",
                        "HTML": "html"
                    },
                },
                'openapi_types': {
                    'q':
                        (str,),
                    'id':
                        (str,),
                    'lat':
                        (str,),
                    'lon':
                        (str,),
                    'zip':
                        (str,),
                    'units':
                        (str,),
                    'lang':
                        (str,),
                    'mode':
                        (str,),
                },
                'attribute_map': {
                    'q': 'q',
                    'id': 'id',
                    'lat': 'lat',
                    'lon': 'lon',
                    'zip': 'zip',
                    'units': 'units',
                    'lang': 'lang',
                    'mode': 'mode',
                },
                'location_map': {
                    'q': 'query',
                    'id': 'query',
                    'lat': 'query',
                    'lon': 'query',
                    'zip': 'query',
                    'units': 'query',
                    'lang': 'query',
                    'mode': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__current_weather_data
        )
